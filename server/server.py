#import all the required libraries
import numpy as np
import pandas as pd
import cv2
import tensorflow as tf 
import itertools
import pefile
import os,math
from queue import Queue
from threading import Thread
import argparse
from PIL import Image
from fastapi import FastAPI, File, UploadFile
from starlette.responses import RedirectResponse
import tempfile
import sys,os
sys.path.append(os.path.dirname(os.path.abspath(os.path.dirname(__file__))))
from scripts import vtune_to_png as vtp
from scripts import exe_to_Grey as etg
from scripts import exe_to_RGB as etr 
sys.path.append('C:/Users/USER/Desktop/project_semester/Detecting-AI-based-Non-binary-Edge-Malware-using-Intel-PT/scripts')
#creating fastApi app 
app_desc = """<h2> 
AI-Based Non-Binary Edge Malware Detection Utilizing Intel PT (Processor Trace)</h2>
<h3> mode 1 : Image CNN <h4> type 1 : Grey </h4><h4> type 2 : RGB </h4></h3> <h3> mode 2 : Text CNN </h3> <h3> mode 3 : Hybrid(Image + Text) -> Not Complete </h3>

"""
app = FastAPI(description = app_desc)

@app.get("/",include_in_schema=False)
async def index():
	return RedirectResponse(url="/docs")

@app.post("/predict/{mode}/{type}")
def parse(mode : int, type : int, file: UploadFile = File(...)):
  extension = os.path.splitext(file.filename)[1]
  _, path = tempfile.mkstemp(prefix='parser_', suffix=extension)
  if path == None:
        return {'response':'Fail','path':path,'mode':mode}
  #받은 파일을 Powershell script의 인자로 줌 -> 분석이 돌려지고 결과 파일을 다시 받아옴
  if mode == 1:
    if type == 1:
      prediction = etg.main(path)
      return {'response':'Success','prediction' : prediction}
    elif type == 2:
      prediction = etr.main(path)
      return {'response':'Success','prediction' : prediction}
    else:
      return {'response':'Invalid Type','path':path,'mode':mode, 'type':type}
  elif mode == 2:
    vtp.execute_powershell(path)
  elif mode == 3:
    pass
  else:
    return {'response':'Invalid Mode','path':path,'mode':mode}
    
    # with open(path, 'ab') as f:
    #     for chunk in iter(lambda: file.file.read(10000), b''):
    #         f.write(chunk)

    # # extract content
    # content = pefile.PE(path,fast_load=True)
    # img = None
    # dataframe = createDataframeFromPEdump(content)
    # binary_preds = getPredictions(dataframe)
    # if binary_preds[1]*100 > 60.0:
    #   createGreyScaleImage(path)
    #   img = cnn_predict(img_path)
    #   return {'response':'OK','path':path,'predictions':binary_preds[1],'malware':img}
    # else:
    #   return{'Response': 'Your file is same from malware.','Malicious percentage':binary_preds[1]*100}
    # remove temp file
    # os.close(_)
    # os.remove(path)
 	

		