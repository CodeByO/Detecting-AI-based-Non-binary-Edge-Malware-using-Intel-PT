#!/usr/bin/env python
# coding: utf-8

# In[117]:


root = "E:/analysiscom1/workspace/track_a_learn/learn/test/"


# In[118]:


from keras.preprocessing.image import ImageDataGenerator


# In[119]:


batches = ImageDataGenerator().flow_from_directory(directory=root, target_size=(64,64), batch_size=10000)


# In[120]:


batches.class_indices


# In[121]:


imgs, labels = next(batches)


# In[122]:


labels.shape


# In[123]:


import sys
import os
from math import log
import numpy as np
import scipy as sp
from PIL import Image
import matplotlib.pyplot as plt


# In[124]:


def plots(ims, figsize=(20,30), rows=10, interp=False, titles=None):
    if type(ims[0]) is np.ndarray:
        ims = np.array(ims).astype(np.uint8)
        if (ims.shape[-1] != 3):
            ims = ims.transpose((0,2,3,1))
    f = plt.figure(figsize=figsize)
    cols = 10 # len(ims)//rows if len(ims) % 2 == 0 else len(ims)//rows + 1
    for i in range(0,50):
        sp = f.add_subplot(rows, cols, i+1)
        sp.axis('Off')
        if titles is not None:
            sp.set_title(list(batches.class_indices.keys())[np.argmax(titles[i])], fontsize=16)
        plt.imshow(ims[i], interpolation=None if interp else 'none')


# In[125]:


plots(imgs, titles = labels)


# In[126]:


classes = batches.class_indices.keys()


# In[127]:


perc = (sum(labels)/labels.shape[0])*100


# In[128]:


plt.xticks(rotation='vertical')
plt.bar(classes,perc)


# In[129]:


from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(imgs/255.,labels, test_size=0.3)


# In[130]:


X_train.shape


# In[131]:


X_test.shape


# In[132]:


y_train.shape


# In[133]:


y_test.shape


# In[134]:


import keras
import tensorflow
from tensorflow.python.keras.models import Input
from keras.models import Sequential, Model
from keras.layers import Dense, Dropout, Flatten, Input
from keras.layers import Conv2D, MaxPooling2D
#from keras.layers.normalization import BatchNormalization
from tensorflow.keras.layers import BatchNormalization
from tensorflow.keras.metrics import AUC


# In[146]:


num_classes = 9


# In[147]:


def malware_model():
    Malware_model = Sequential()
    Malware_model.add(Conv2D(30, kernel_size=(3, 3),
                     activation='relu',
                     input_shape=(64,64,3)))

    Malware_model.add(MaxPooling2D(pool_size=(2, 2)))
    Malware_model.add(Conv2D(15, (3, 3), activation='relu'))
    Malware_model.add(MaxPooling2D(pool_size=(2, 2)))
    Malware_model.add(Dropout(0.25))
    Malware_model.add(Flatten())
    Malware_model.add(Dense(128, activation='relu'))
    Malware_model.add(Dropout(0.5))
    Malware_model.add(Dense(50, activation='relu'))
    Malware_model.add(Dense(num_classes, activation='softmax'))
    Malware_model.compile(loss='categorical_crossentropy', optimizer = 'adam', metrics=['accuracy'])
    return Malware_model


# In[ ]:





# In[148]:


from keras import backend as K

def recall_m(y_test, y_pred):
    true_positives = K.sum(K.round(K.clip(y_test * y_pred, 0, 1)))
    possible_positives = K.sum(K.round(K.clip(y_test, 0, 1)))
    recall = true_positives / (possible_positives + K.epsilon())
    return recall

def precision_m(y_test, y_pred):
    true_positives = K.sum(K.round(K.clip(y_test * y_pred, 0, 1)))
    predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1)))
    precision = true_positives / (predicted_positives + K.epsilon())
    return precision

def f1_m(y_test, y_pred):
    precision = precision_m(y_test, y_pred)
    recall = recall_m(y_test, y_pred)
    return 2*((precision*recall)/(precision+recall+K.epsilon()))


# In[149]:


Malware_model = malware_model()


# In[150]:


Malware_model.summary()


# In[151]:


y_train.shape


# In[152]:


y_train_new = np.argmax(y_train, axis=1)


# In[153]:


y_train_new


# In[154]:


from sklearn.utils import class_weight
class_weights = class_weight.compute_class_weight(class_weight = 'balanced',
                                                 classes = np.unique(y_train_new),
                                                 y = y_train_new)
#class_weights = {i : class_weights[i] for i in range(5)}

class_weights = {l:c for l,c in zip(np.unique(y_train_new), class_weights)}


# In[155]:


Malware_model.compile(optimizer='adam', loss='binary_crossentropy', metrics=[f1_m,precision_m, recall_m,AUC()])
#fix adam to sgd


# In[156]:


Malware_model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=20,  class_weight=class_weights)


# In[157]:


scores = Malware_model.evaluate(X_test, y_test)


# In[158]:


loss, accuracy, f1_score, precision, recall = Malware_model.evaluate(X_test, y_test)


# In[159]:


print('Final CNN accuracy: ', scores[1])


# In[160]:


import numpy as np
import pandas as pd


# In[161]:


y_pred = np.argmax(Malware_model.predict(X_test), axis=-1)
y_pred
y_test2 = np.argmax(y_test, axis=1)
y_test2


# In[162]:


from sklearn import metrics
c_matrix = metrics.confusion_matrix(y_test2, y_pred)
import seaborn as sns
def confusion_matrix(confusion_matrix, class_names, figsize = (10,7), fontsize=14):
    
    df_cm = pd.DataFrame(
        confusion_matrix, index=class_names, columns=class_names, 
    )
    fig = plt.figure(figsize=figsize)
    try:
        heatmap = sns.heatmap(df_cm, annot=True, fmt="d")
    except ValueError:
        raise ValueError("Confusion matrix values must be integers.")
    heatmap.yaxis.set_ticklabels(heatmap.yaxis.get_ticklabels(), rotation=0, ha='right', fontsize=fontsize)
    heatmap.xaxis.set_ticklabels(heatmap.xaxis.get_ticklabels(), rotation=45, ha='right', fontsize=fontsize)
    plt.ylabel('True label')
    plt.xlabel('Predicted label')


# In[163]:


class_names= batches.class_indices.keys()
confusion_matrix(c_matrix, class_names, figsize = (20,7), fontsize=14)


# In[164]:


results = pd.DataFrame({ 'CNN Model': 'Malware model',    
    'Accuracy': [scores[1]],
    'Loss': [scores[0]],
    'Precision': [scores[3]],
    'Recall' : [scores[4]],
    'f1 score': [scores[2]]})


# In[165]:


results


# In[166]:


from sklearn.metrics import classification_report
import numpy as np

Y_test = np.argmax(y_test, axis=1) # Convert one-hot to index
y_pred = np.argmax(Malware_model.predict(X_test), axis=-1)
print(classification_report(Y_test, y_pred))


# In[167]:





# In[169]:


ls


# In[ ]:




