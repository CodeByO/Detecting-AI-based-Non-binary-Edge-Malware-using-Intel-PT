#import all the required libraries
import os
from fastapi import FastAPI, UploadFile
from starlette.responses import RedirectResponse, FileResponse
from fastapi.staticfiles import StaticFiles
from starlette.templating import Jinja2Templates
from fastapi.responses import JSONResponse
import sys,os
import json
sys.path.append(os.path.dirname(os.path.abspath(os.path.dirname(__file__))))
from scripts import vtune_to_png as vtp
from scripts import exe_to_Grey as etg
from scripts import exe_to_RGB as etr 
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(os.path.dirname(__file__))),'scripts'))
#creating fastApi app 
app_desc = """<h2> 
AI-Based Non-Binary Edge Malware Detection Utilizing Intel PT (Processor Trace)</h2>
<h3> mode 1 : Image CNN <h4> type 1 : Gray </h4><h4> type 2 : RGB </h4></h3> <h3> mode 2 : Intel PT Visualization + Binary Image </h3>

"""
app = FastAPI(description = app_desc)

data_path = os.path.join(os.path.dirname(os.path.abspath(os.path.dirname(__file__))),'data')
@app.get("/",include_in_schema=False)
async def index():
	return RedirectResponse(url="/docs")

@app.post("/predict/{mode}/{type}")
async def parse(mode : int, type : int, file: UploadFile):
  UPLOAD_DIRECTORY = data_path
  if file.filename.endswith(".exe"):
      file.filename.replace(".exe","")
        
  contents = await file.read()
  with open(os.path.join(UPLOAD_DIRECTORY, file.filename), "wb") as fp:
    fp.write(contents)
  path = os.path.join(UPLOAD_DIRECTORY, file.filename)
  if mode == 1:
    if type == 1:
          prediction = etg.main(path)
          os.remove(path)
          return {'response':'Success','prediction' : prediction}
    elif type == 2:
      prediction = etr.main(path)
      os.remove(path)
      return {'response':'Success','prediction' : prediction}
    else:
      return {'response':'Invalid Type','path':path,'mode':mode, 'type':type}
  elif mode == 2:
    prediction = etr.main(path)
    if not file.filename.endswith(".exe"):
          file.filename += ".exe"
          
  
    cputime_path = os.path.join(os.path.dirname(os.path.abspath(os.path.dirname(__file__))),'cputime_png')
    change_file_name = f"CPU_Time_{file.filename}.png"
    image_path = os.path.join(cputime_path,change_file_name)
    
    
    if os.path.isfile(image_path):
          
      prediction_string = [f"{key} : {value}" for key,value in prediction.items()]
      prediction_string = ' '.join(i for i in prediction_string)
      headers = {"Custom-Header": prediction_string}

      response = FileResponse(image_path, headers=headers, media_type="image/png")
      return response
    else:
      return None
  elif mode == 3:
      prediction = etr.main(path)
      prediction_string = [f"{key} : {value}" for key,value in prediction.items()]
      prediction_string = ' '.join(i for i in prediction_string)
      normal_path = os.path.join(data_path,'normal')
      RGB_path = os.path.join(normal_path,"RGB")
      file_name = file.filename.replace(".exe","")
      change_file_name = f"{file_name}_RGB.png"
      image_path = os.path.join(RGB_path,change_file_name)
      
      print(image_path)
      if os.path.isfile(image_path):
        headers = {"Custom-Header": prediction_string}

        response = FileResponse(image_path, headers=headers, media_type="image/png")
        return response
      else:
        return None
            
  else:
    return {'response':'Invalid Mode','path':path,'mode':mode}